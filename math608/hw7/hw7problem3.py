import numpy as npfrom sklearn.preprocessing import StandardScaler#Load and transpose the dataxtrain = np.genfromtxt("khan.xtrain").Txtest = np.genfromtxt("khan.xtest").Tytrain = np.genfromtxt("khan.ytrain", dtype=int)ytest = np.genfromtxt("khan.ytest", dtype=int)print("\n===== PART A =====\n")#Standardize training and test featuresscaler = StandardScaler()xtrain_std = scaler.fit_transform(xtrain)xtest_std = scaler.transform(xtest)#Check blockprint("Training shape:", xtrain_std.shape)print("Testing shape:", xtest_std.shape)print("Training classes:", np.unique(ytrain))print("Testing classes:", np.unique(ytest))print("\n===== PART B =====\n")from sklearn.svm import SVCfrom sklearn.model_selection import LeaveOneOut, cross_val_scoreimport matplotlib.pyplot as plt#Filter out -1 from test setmask = ytest != -1xtest_clean = xtest_std[mask]ytest_clean = ytest[mask]#Set up range of C valuesC_values = np.logspace(-3, 3, 50)test_accuracies = []cv_accuracies = []loo = LeaveOneOut()for C in C_values:    clf = SVC(kernel="linear", C=C)    clf.fit(xtrain_std, ytrain)    #Test accuracy    test_acc = clf.score(xtest_clean, ytest_clean)    test_accuracies.append(test_acc)    # LOOCV accuracy    cv_scores = cross_val_score(clf, xtrain_std, ytrain, cv=loo)    cv_accuracies.append(np.mean(cv_scores))#Plot resultsplt.figure(figsize=(10, 5))plt.plot(np.log10(C_values), test_accuracies, label="Test Accuracy", linewidth=2)plt.plot(np.log10(C_values), cv_accuracies, label="LOOCV Accuracy", linewidth=2)plt.xlabel("log10(C)")plt.ylabel("Accuracy")plt.title("Accuracy vs C for Linear SVM")plt.legend()plt.grid(True)plt.show()print("\n===== PART C =====\n")#hoose any C (they all performed the same); we'll pick the middle oneoptimal_C = C_values[len(C_values)//2]#Linear kernel final modelclf_linear = SVC(kernel="linear", C=optimal_C)clf_linear.fit(xtrain_std, ytrain)train_acc_linear = clf_linear.score(xtrain_std, ytrain)test_acc_linear = clf_linear.score(xtest_clean, ytest_clean)#Predict on zero vectorzero_input = np.zeros((1, xtrain_std.shape[1]))pred_linear = clf_linear.predict(zero_input)print("Linear SVM")print("Training accuracy:", train_acc_linear)print("Test accuracy:", test_acc_linear)print("Prediction for all-zero input:", pred_linear[0])#RBF kernelclf_rbf = SVC(kernel="rbf", C=optimal_C)clf_rbf.fit(xtrain_std, ytrain)train_acc_rbf = clf_rbf.score(xtrain_std, ytrain)test_acc_rbf = clf_rbf.score(xtest_clean, ytest_clean)pred_rbf = clf_rbf.predict(zero_input)print("\nRBF SVM")print("Training accuracy:", train_acc_rbf)print("Test accuracy:", test_acc_rbf)print("Prediction for all-zero input:", pred_rbf[0])